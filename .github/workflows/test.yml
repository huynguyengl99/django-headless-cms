name: Test

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v4
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - uses: actions/cache@v4
        id: cache
        with:
          path: .venv
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-django-headless-cms-${{ hashFiles('**/poetry.lock') }}-lint
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --only lint
      - name: Lint
        run: |
          source .venv/bin/activate
          bash scripts/lint.sh

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: cms_test_pass
          POSTGRES_DB: cms_test_db
          POSTGRES_USER: cms_test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      POSTGRES_DB: cms_test_db
      POSTGRES_USER: cms_test_user
      POSTGRES_PASSWORD: cms_test_pass
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - uses: actions/cache@v4
        id: cache
        with:
          path: .venv
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-django-headless-cms-${{ hashFiles('**/poetry.lock') }}-test
      - name: Install Initial Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements-init.txt
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --only test --only main
      - run: mkdir coverage
      - name: Test
        run: |
          source .venv/bin/activate
          coverage run -m pytest tests
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}
      - name: Store coverage files
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
